#!/bin/bash
#
#####################################################################
#
#                   Psi-Plus OS X build script.
#
#####################################################################
#
# Script writted and debugged with love by Stanislav N. aka pztrn
# <pztrn at pztrn dot name>.
#
# Requirements:
#   * git
#   * xcode (including CLI tools)
#   * Qt built from source (not homebrew, not installed from official package)
#
# ToDo for packaging:
#   * gstreamer (?)
#
# These dependencies should be installed with package manager like brew or
# macports:
#   * autoconf
#   * automake
#   * cmake
#   * libtool
#
# WARNING: this script was tested with dependencies installed with brew.
# Bug reports about fails with dependencies installed by other package
# systems are accepted but WILL have lowest possible priority!
# Patches welcome for that.

#####################################################################
# Options.
# All of these options can be changed manually.

# Root directory for sources and build process.
PSI_DIR="${HOME}/psi"
# Directory for dependencies.
DEPS_ROOT="${PSI_DIR}/deps_root"
# Dependencies build root.
# It can be cleaned up later.
DEPS_BUILDROOT="${PSI_DIR}/deps_buildroot"

# Iconsets that will be installed into bundle.
ICONSETS="system clients activities moods affiliations roster"

# Translations to install. Can be overrided with --bundle-all-translations
# CLI parameter.
TRANSLATIONS_TO_INSTALL="en"

# Configure options.
# These options will be passed to ./configure script.
# Do not change them until you know what are you doing!
CONF_OPTS="--disable-qdbus --enable-whiteboarding --disable-xss --verbose --release"

# Psi base version.
PSI_VERSION="1.0"

# Disabled plugins.
# Most likely will not build for now.
DISABLED_PLUGINS="screenshotplugin"

#####################################################################
# CLI options.
# These options are controlled by CLI parameters (see "psibuild --help").
# You should not change them, unless you want to do something by
# default.

# Build from git, or from snapshot?
# Controlled with "--build-from-snapshot" parameter.
BUILD_FROM_SNAPSHOT=0

# Enable Webkit build?
# Controlled with "--enable-webengine" parameter.
ENABLE_WEBENGINE=0

# Bundle translations?
# Controlled with "--bundle-all-translations" parameter.
BUNDLE_ALL_TRANSLATIONS=0

# Enable unstable (dev) plugins?
# Controlled with "--enable-dev-plugins" parameter.
ENABLE_DEV_PLUGINS=0

# Make portable version?
# Controlled with "--make-portable" parameter.
PORTABLE=0

# Skip failed or invalid patches?
# Controlled with "--skip-bad-patches" parameter.
SKIP_BAD_PATCHES=0

# Use Qt5 from Qt website? Controlled with "--use-qt5-from-website"
# Not recommended.
USE_QT5_FROM_WEBSITE=0

#####################################################################
# Sources.
# Do not change this.

# Psi sources.
GIT_REPO_PSI=git://github.com/psi-im/psi.git
GIT_REPO_PSI_SNAPSHOTTED=git://github.com/psi-plus/psi-plus-snapshots.git
GIT_REPO_PLUS=git://github.com/psi-plus/main.git
GIT_REPO_PLUGINS=git://github.com/psi-im/plugins.git
GIT_REPO_MAINTENANCE=git://github.com/psi-plus/maintenance.git
GIT_REPO_RESOURCES=git://github.com/psi-plus/resources.git
GIT_REPO_LANGS=git://github.com/psi-plus/psi-plus-l10n.git

# Dependencies
GIT_REPO_PSIDEPS=git://github.com/psi-im/psideps.git
GIT_REPO_DEP_QCONF=git://github.com/psi-plus/qconf.git
GIT_REPO_DEP_QCA_QT5=git://anongit.kde.org/qca.git

#####################################################################
# Other parameters
# Parallel building.
MAKEOPTS=${MAKEOPT:--j$((`sysctl -n hw.ncpu`+1)) -s}

# Skip generic patches. Useful when we're building from snapshot
# sources.
SKIP_GENERIC_PATCHES=0

#####################################################################
# Script path.
# Do not change this.
SCRIPT_PATH=$(perl -e 'use File::Basename; use Cwd "abs_path"; print dirname(abs_path(@ARGV[0]));' -- "$0")


#####################################################################
# Helper modules import. Do not change this unless you're know what
# are you doing! They're contain required functions!
source "${SCRIPT_PATH}/modules/apply_patch.module.sh"
source "${SCRIPT_PATH}/modules/build_dependencies.module.sh"
source "${SCRIPT_PATH}/modules/bundle_library.module.sh"
source "${SCRIPT_PATH}/modules/check_environment.module.sh"
source "${SCRIPT_PATH}/modules/check_tools_presence.module.sh"
source "${SCRIPT_PATH}/modules/compile_plugins.module.sh"
source "${SCRIPT_PATH}/modules/compile_sources.module.sh"
source "${SCRIPT_PATH}/modules/copy_libraries.module.sh"
source "${SCRIPT_PATH}/modules/copy_resources.module.sh"
source "${SCRIPT_PATH}/modules/create_directories.module.sh"
source "${SCRIPT_PATH}/modules/create_version_string.module.sh"
source "${SCRIPT_PATH}/modules/install_build_deps.module.sh"
source "${SCRIPT_PATH}/modules/logger.module.sh"
source "${SCRIPT_PATH}/modules/make_bundle.module.sh"
source "${SCRIPT_PATH}/modules/obtain_sources.module.sh"
source "${SCRIPT_PATH}/modules/parse_cli_parameters.module.sh"
source "${SCRIPT_PATH}/modules/prepare_sources.module.sh"

#####################################################################
#
#                               The Code
#
#####################################################################


#####################################################################
# This function executes when some action failed. This action should
# redirect output to some log.
# Parameters that required to be passed:
#   * $1 - action that failed
#   * $2 - log path
#####################################################################
function action_failed()
{
    local action=$1
    local log_path=$2
    error "${action} failed."
    if [ "${log_path}" != "None" ]; then
        error "Last 10 lines from log:"
        cat "${log_path}" | tail -n 10
    fi
    exit 1
}

cleanup_framework() {
    # remove dev stuff
    rm -rf $1/Headers
    rm -f $1/${2}_debug
    rm -f $1/${2}_debug.prl
    rm -rf $1/Versions/$3/Headers
    rm -f $1/Versions/$3/${2}_debug
    rm -f $1/Versions/$3/${2}_debug.prl
}

#####################################################################
# This function exports Qt version.
#####################################################################
function use_qt()
{
    local version=$1
    local path=$2
    local path=`echo ${path} | sed -e "s/\/\//\//"`
    export QTDIR="${path}"
    export QT_VERSION="${version}"
    export QT_VERSION_MAJOR="${version:0:1}"
    log "Will use Qt-${QT_VERSION} located at '${QTDIR}'"
}

#####################################################################
# This function just shows help text when "--help" or "-h" was passed
# as parameters.
#####################################################################
function help() {
    echo "Psi+ build script for OS X.
https://github.com/psi-plus/maintenance

Available parameters:

Building options:
    --build-from-snapshot       Build Psi+ from snapshots rather than from git.

    --make-portable             Make Psi+ bundle be portable. WARNING: completely
                                untested thing. Might eat your magic mouse or
                                trackpad.

    --skip-bad-patches          Do not exit if bad patch appears.

    --use-qt5-from-website      Try to use Qt5 installed with online or offline
                                installer. Note that this could break distribution
                                ability!

Feature options:
    --bundle-all-translations   Bundle all translations. By default only english
                                will be bundled.

    --enable-dev-plugins        Build unstable (dev) plugins.

    --enable-webengine          Build webengine version. By default non-webengine
                                version will be built.

ENVIRONMENT VARIABLES

    QTDIR                       Qt installation directory.
"
}

case $1 in
    --help)
        help
    ;;
    -h)
        help
    ;;
    *)
        time_build_start=`date +'%s'`
        parse_cli_parameters $@
        check_environment
        check_tools_presence
        create_directories
        obtain_sources
        create_version_string
        if [ "${SKIP_BUILD}" != "1" ]; then
            install_build_deps
            build_dependencies
            prepare_sources
            compile_sources
            compile_plugins
        fi
        copy_resources
        copy_libraries
        make_bundle
        time_build_end=`date +'%s'`
        time_build_delta=$[ ${time_build_end} - ${time_build_start} ]
        log "Build time: ${time_build_delta} seconds."
    ;;
esac
